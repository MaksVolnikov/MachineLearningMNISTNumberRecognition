# Images recognition with the help of perceptron
########################################################################################################################

import numpy as np
import pandas as pd
import seaborn as sn
import matplotlib.pyplot as plt

class Perceptron:
    '''–ö–ª–∞—Å—Å –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω–∞'''
    def __init__(self, input_size, output_size):
        self.generate_weight(input_size, output_size)
        self.create_csv(self.Weights, "weights")
    
    def generate_weight(self, input_size, output_size):
        # Xavier 
        #stdv = 1/np.sqrt(input_size)
        #self.Weights = np.random.uniform(-stdv, stdv, size=(input_size, output_size))
        #self.bias = np.random.uniform(-stdv, stdv, size=output_size)
        self.Weights = np.random.uniform(-0.15, 0.15, size=(input_size, output_size))
        self.bias = np.random.uniform(-0.15, 0.15, size=output_size)

    def create_csv(self, array, name):
        import os
        folder_ui_path = '_out' if os.path.isdir('_out') is True else 'L2/_out'
        np.savetxt(f"{folder_ui_path}/{name}.csv", array, delimiter=",")

    '''–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'''
    def ReLU(self, x):
        return np.maximum(0,x)

    def sigmoid(self, x):
        return 1/(1 + np.exp(-x))
    
    '''–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤'''
    def out_neurons(self, input, in_func_activation):
        '''–í—ã—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–æ–≤ (–≤–µ–∫—Ç–æ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)'''
        # –ü–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è –Ω–∞ –º–∞—Ç—Ä–∏—Ü—É –≤–µ—Å–æ–≤ (‚àëweight*x) (dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m]))
        self.output = np.dot(input, self.Weights)
        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –º–∞—Ç—Ä–∏—Ü–µ —Å–º–µ—â–µ–Ω–∏—è
        self.output += self.bias 
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        self.output = in_func_activation(self.output)
        return self.output   

    '''–û–±—É—á–µ–Ω–∏–µ'''
    def train(self, in_train_images, in_train_labels, in_func_activate=ReLU, in_count_use_img=1000, in_epochs=1, in_learning_rate=0.001, ui_progress_bar=None, window=None):
        '''–û–±—É—á–µ–Ω–∏–µ'''
        self.count_train_imgages = len(in_train_images[:in_count_use_img])    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∫–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–µ—Å–∞ –¥–æ –æ–±—É—á–µ–Ω–∏—è
        if window is not None: window.weights_history.append(self.Weights); 

        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —ç–ø–æ—Ö–∞–º –æ–±—É—á–µ–Ω–∏—è
        for epoch in range(in_epochs):
            # ProgressBar 
            if ui_progress_bar is not None: ui_progress_bar.setValue(0); 
            if ui_progress_bar is not None: ui_progress_bar.setMinimum(0); 
            if ui_progress_bar is not None: ui_progress_bar.setMaximum(self.count_train_imgages); 

            # Train
            for i in range(self.count_train_imgages):
                source_image = in_train_images[i]                           # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 28—Ö28
                source_label = in_train_labels[i]                           # –†–∞–∑–º–µ—Ç–∫–∞ –≤ —É–Ω–∏—Ç–∞—Ä–Ω–æ–º –∫–æ–¥–µ (ùê≤_ùê¢)
                y_true = np.argmax(source_label)                            # –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ç–∏

                input_layer = source_image.flatten()                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∏–∫—Å–µ–ª–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 28—Ö28=784 (ùê±_ùê¢)
                y_pred = self.out_neurons(input_layer, in_func_activate)    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω (–≤–µ–∫—Ç–æ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π) (ùê≤_pred_i)
                y_result = np.argmax(y_pred)                                # –û—Ç–≤–µ—Ç –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω–∞ (–º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)

                error = source_label-y_pred                                 # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É (–≤–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫) (ùêûrror_i = ùê≤_ùê¢ ‚àí ùê≤_pred_i)
                input_layer = np.vstack(input_layer)                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–æ–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—ã
                ùêÉ_ùê¢ = in_learning_rate*input_layer*error                    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –≤–µ—Å–æ–≤ (ùêÉ_ùê¢ = ùõº*(ùê±_ùê¢)^ùëá*ùêûrror_i) (–≤–µ–ª–∏—á–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–∞)
                self.Weights = self.Weights+ùêÉ_ùê¢                             # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Å–æ–≤ (ùêñ(ùêßùêûùê∞) = ùêñ(ùê®ùê•ùêù) + ùêÉ_ùê¢)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ProgressBar
                if ui_progress_bar is not None: ui_progress_bar.setValue(i); 
                if window is not None: window.SystemMassage_TextBrowser_append(f"[{epoch+1}/{in_epochs} —ç–ø–æ—Ö–∞] –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {i + 1}/{self.count_train_imgages}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç {y_result}, –æ–∂–∏–¥–∞–ª–æ—Å—å {y_true}"); 

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–µ
            if window is not None: window.weights_history.append(self.Weights); 
            self.create_csv(self.Weights , f"epoch_{epoch}")
        
        # –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º 0% –≤ ProgressBar
        if ui_progress_bar is not None: ui_progress_bar.setValue(0); 

    '''–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ'''
    def recognition(self, image, in_func_activation):
        '''–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ'''
        x = image.flatten()                               # –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥ 28—Ö28=784
        y_pred = self.out_neurons(x, in_func_activation)  # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–æ–≤ (func_activate(X*Weights) 
        return np.argmax(y_pred)                          # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    
'''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è'''
def stat(perceptron_:Perceptron, in_test_images, in_test_labels, in_func_activation):
    '''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è - –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫'''
    def confusion_matrix(y_pred, y_true):
        classes = np.unique(y_true)
        classes.sort()
        conf_m = np.zeros(shape=(len(classes), len(classes)))
        for i in classes:
            for j in classes:
                conf_m[i, j] = np.logical_and((y_pred==i), (y_true==j)).sum()
        return conf_m, classes
    
    def accuracy(y_pred, y_true):
        y_pred = np.array(y_pred)
        y_true = np.array(y_true)
        return (y_pred==y_true).sum()/y_true.size
    
    y_true = []
    y_pred = []
    for x, y in zip(in_test_images, in_test_labels):
        y_true.append(np.argmax(y))
        y_pred.append(perceptron_.recognition(x, in_func_activation)) 
        
    confusion_matrix = confusion_matrix(y_pred,y_true)
    perceptron_accuracy = round(accuracy(y_pred, y_true)*100,5)
    print(f"Accuracy perceptron: {perceptron_accuracy}%")
    df_cm = pd.DataFrame(confusion_matrix[0], range(10), range(10))

    sn.set(font_scale=1.4) # for label size
    sn.heatmap(df_cm, annot=True, annot_kws={"size": 8},fmt='g',cmap="Blues") # font size
    plt.show()

'''–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–µ—Å–∞'''
def view_weigts(in_weights):
    f, ax = plt.subplots(2, 5, figsize=(12,5), gridspec_kw={'wspace':0.05, 'hspace':0.2}, squeeze=True)    
    for index, img in enumerate(in_weights.T):
        index_cell = index % 5
        index_row = 0 if index < 5 else 1
        ax[index_row, index_cell].axis("off")
        ax[index_row, index_cell].imshow(img.reshape((28,28)), cmap='gray')
        ax[index_row, index_cell].set_title(str(index))
    
    '''
    f  = plt.figure(figsize=(20,20))
    for size, i in enumerate(in_weights.T):
        f.add_subplot(5,5, size+1)
        plt.grid(False)
        plt.axis('off')
        plt.imshow(i.reshape((28,28)), cmap='gray')
    '''
    plt.show()